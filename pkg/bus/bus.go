package bus

import (
	"context"
	"fmt"
	"reflect"
	"sync"
)

// HandlerFunc ‡∏Ñ‡∏∑‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô bus
type HandlerFunc func(ctx context.Context, data any) (any, error)

// RequestBus ‡∏Ñ‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏Å‡∏•‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö mapping ‡∏Ç‡∏≠‡∏á service.method ‚Üí handler
type RequestBus struct {
	mu       sync.RWMutex
	handlers map[string]HandlerFunc
}

// NewRequestBus ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á bus
func NewRequestBus() *RequestBus {
	return &RequestBus{
		handlers: make(map[string]HandlerFunc),
	}
}

// RegisterContract ‡πÉ‡∏ä‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô service ‡∏ó‡∏µ‡πà implement interface ‡∏ï‡∏≤‡∏° contract
// ‡πÄ‡∏ä‡πà‡∏ô b.RegisterContract("Exam", (*contract.ExamContract)(nil), port)
func (b *RequestBus) RegisterContract(serviceName string, iface any, impl any) {
	ifaceType := reflect.TypeOf(iface).Elem() // ‡∏î‡∏∂‡∏á type ‡∏Ç‡∏≠‡∏á interface ‡πÄ‡∏ä‡πà‡∏ô contract.ExamContract
	implValue := reflect.ValueOf(impl)

	for i := 0; i < ifaceType.NumMethod(); i++ {
		method := ifaceType.Method(i)
		implMethod := implValue.MethodByName(method.Name)

		if !implMethod.IsValid() {
			panic(fmt.Sprintf("‚ùå %s missing method: %s", serviceName, method.Name))
		}

		key := fmt.Sprintf("%s.%s", serviceName, method.Name)
		fmt.Println("üì° Registered:", key)

		// wrapper function ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏≠‡∏ô CallContract
		b.handlers[key] = func(ctx context.Context, data any) (any, error) {
			mType := implMethod.Type()
			args := []reflect.Value{reflect.ValueOf(ctx)}

			// ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ argument ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á (request struct) ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
			if mType.NumIn() > 1 {
				args = append(args, reflect.ValueOf(data))
			}

			// reflect call ‚Üí port.FindExamById(ctx, req)
			out := implMethod.Call(args)

			var err error
			if len(out) == 2 && !out[1].IsNil() {
				err = out[1].Interface().(error)
			}
			if len(out) >= 1 {
				return out[0].Interface(), err
			}
			return nil, err
		}
	}
}

// CallContract ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô handler
// resRaw, _ := b.CallContract(ctx, "Exam.FindExamById", contract.ExamRequest{ID: "EX-001"})
// res := resRaw.(*contract.ExamResponse)
func (b *RequestBus) CallContract(ctx context.Context, key string, req any) (any, error) {
	b.mu.RLock()
	h, ok := b.handlers[key]
	b.mu.RUnlock()
	if !ok {
		return nil, fmt.Errorf("no handler for key: %s", key)
	}
	return h(ctx, req)
}

// Discover ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ handler ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏≠‡∏¢‡∏π‡πà (‡πÉ‡∏ä‡πâ debug/log)
func (b *RequestBus) Discover(prefix string) []string {
	b.mu.RLock()
	defer b.mu.RUnlock()

	keys := []string{}
	for k := range b.handlers {
		if prefix == "" || len(k) >= len(prefix) && k[:len(prefix)] == prefix {
			keys = append(keys, k)
		}
	}
	return keys
}
